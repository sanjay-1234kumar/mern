let DBProduct,API_KEY,axios;_157‍.x([["default",()=>_157‍.o]]);_157‍.w("../../model/index",[["DBProduct",["DBProduct"],function(v){DBProduct=v}]]);_157‍.w("../../config/index",[["API_KEY",["API_KEY"],function(v){API_KEY=v}]]);_157‍.w("axios",[["default",["axios"],function(v){axios=v}]]);







const MyProduct={

getProductPublic: async(req,res,next)=>{
    _157‍.g.console.log(req.query);

    const{search}=req.query;

    if(!req.query.search){
        return next("search qrey is not proved user");
    }

    try {

        const document=await DBProduct.find({p_subalt:search}).sort({reviews:-1}).limit(20).exec();

        return res.json(document);

        
    } catch (error) {
        
        return next(error);

    }

},

getProductVideo: async(req,res,next)=>{

_157‍.g.console.log(req.query);

const{search}=req.query;

if(!req.query.search){

    

    return next("sarch qurey is empty please send ");


}

console.log("axios related work");


const config={
    method:'get',
    url:'https://youtube.googleapis.com/youtube/v3/search',
    params: {
        part:'snippet',
        maxResults:2,
        q:search,
        key:API_KEY
      },
};


try {
    
const result=await axios(config);

console.log("we are result");



const {items}=result.data;

_157‍.g.console.log(items);



return res.json(items);


} catch (error) {
    
    console.log("yout data error");
    return next(error);
}




},




};


_157‍.d(MyProduct);
